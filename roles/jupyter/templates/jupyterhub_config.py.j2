# {{ ansible_managed }}

import sys

c.JupyterHub.admin_access = True
c.JupyterHub.services = [
    {
        'name': 'experiment-launcher',
        'admin': True,
        'api_token': '{{ lookup('password', 'jupyterhub.launcher.token length=32 chars=ascii_letters,digits') }}',
    },
    {
        'name': 'idle-culler',
        'admin': True,
        'command': [
            sys.executable,
            '-m', 'jupyterhub_idle_culler',
            '--timeout={{ cull.timeout }}',
            '--max_age={{ cull.max_age }}'
        ],
    }
]
c.Authenticator.admin_users = set([ {% for user in jupyterhub_admins %}
     '{{ user.name }}'{% if not loop.last %},{% endif %}
 {% endfor %} ])

c.JupyterHub.spawner_class = 'systemdspawner.SystemdSpawner'
c.SystemdSpawner.default_shell = '/bin/bash'

c.Spawner.default_url = '/lab'
c.Spawner.environment = { {% for key, value in jupyterhub_spawner_environment.items() %}
    '{{ key }}': '{{ value }}'{% if not loop.last %},{% endif %}
{% endfor %} }
c.Spawner.notebook_dir = '~'
c.JupyterHub.port = 8000

# Don't interrupt users when jupyterhub service is restarted
c.JupyterHub.cleanup_servers = False
c.JupyterHub.cleanup_proxy = False

# Remove system python from kernel list
# c.Spawner.args = ["--KernelSpecManager.ensure_native_kernel=False"]

# Host from /jupyter
c.JupyterHub.base_url = '/jupyter'

c.JupyterHub.template_vars = {'announcement_login': 'By logging in you accept the GRDC observation data policy at https://www.bafg.de/GRDC/EN/01_GRDC/12_plcy/data_policy_node.html'}
