---
# tasks file for cylc-web
- name: Install ngix
  apt:
    update_cache: yes
    name: "{{ item }}"
  loop:
    - nginx
    - certbot
    - python-certbot-nginx
    - python-passlib
- name: Check letsencrypt
  stat:
    path: /etc/letsencrypt/live/{{ cylc_domain }}/privkey.pem
  register: privcert
- name: Check local letsencrypt cache
  local_action:
    module: stat
    path: "{{ cylc_domain }}/letsencrypt/live/{{ cylc_domain }}/privkey.pem"
  register: localprivcert
- name: CertBot from cache
  synchronize:
    src: "{{ cylc_domain }}/letsencrypt/"
    dest: /etc/letsencrypt/
    recursive: yes
  when: privcert.stat.exists == False and localprivcert.stat.exists and not selfsigned
- name: CertBot
  command: certbot certonly --nginx --preferred-challenges http --non-interactive -d {{ cylc_domain }} --agree-tos --email {{ certbot_email }}
  args:
    creates: /etc/letsencrypt/live/{{ cylc_domain }}/privkey.pem
  when: privcert.stat.exists == False and localprivcert.stat.exists == False and not selfsigned
- name: Self signed cert
  command: openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/letsencrypt/live/{{ cylc_domain }}/privkey.pem -out /etc/letsencrypt/live/{{ cylc_domain }}/fullchain.pem -subj "/C=NL/ST=Noord Holland/L=Amsterdam/O=Netherlands eScience Center/CN=eWatercycle"
  args:
    creates: /etc/letsencrypt/live/{{ cylc_domain }}/privkey.pem
  when: privcert.stat.exists == False and selfsigned and localprivcert.stat.exists == False
  notify:
    - restart jupyterhub
- name: CertBot build cache
  block:
  - name: Create backup folder
    local_action: 
      module: file
      path: "{{ cylc_domain }}"
      state: directory
  - synchronize:
      src: /etc/letsencrypt/
      dest: "{{ cylc_domain }}/letsencrypt/"
      recursive: yes
      mode: pull
  when: localprivcert.stat.exists == False and not selfsigned
- name:  Allow http(s) traffic
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - 443
- name: Create passwords
  htpasswd:
    path: /etc/nginx/passwdfile
    name: "{{ item.name }}"
    password: "{{ item.password }}"
  loop: "{{ cylc_web_users }}"
- name: Copy nginx config
  template:
    src: nginx-default.j2
    dest: /etc/nginx/sites-available/default
  notify:
    - restart nginx
- name: Copy Cylc Web systemd
  template:
    src: cylc-web.systemd.j2
    dest: /etc/systemd/system/cylc-web.service
- name: Cylc Web start
  systemd:
    name: cylc-web
    daemon_reload: yes
    state: started