---
- hosts: notebookserver
  vars_files:
    - vars.yml
  handlers:
    - name: restart docker
      systemd:
        daemon_reload: yes
        name: docker
        state: restarted
  tasks:
    - apt:
        update_cache: yes
        name: "{{ item }}"
      loop:
        - git
        - gcc
        - g++
        - make
        - ntp
        - apt-transport-https
        - python3-setuptools
        - gnupg
        - gnupg-agent
        - dirmngr
        - rsync
    # Extra disk (ceph)
    - name: Mount dir for ceph
      file:
        path: /data
        state: directory
    - name: create a xfs filesystem on /dev/vdc
      filesystem:
        fstype: xfs
        dev: /dev/vdc
    - name: Mount /dev/vdc as /data
      mount:
        fstype: xfs
        state: mounted
        path: /data
        src: /dev/vdc
    # Extra disk (volatile)
    - name: Mount dir for /mnt
      file:
        path: /mnt
        state: directory
    - name: Create a xfs filesystem on /dev/vdb
      filesystem:
        fstype: xfs
        dev: /dev/vdb
    - name: Mount /dev/vdb as /mnt
      mount:
        fstype: xfs
        state: mounted
        path: /mnt
        src: /dev/vdb
    - name: Home root
      file:
        path: /mnt/home
        state: directory
    - name: Apps root
      file:
        path: /mnt/apps
        state: directory
    - get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /opt/get-pip.py
    - command: python3 /opt/get-pip.py
      args:
        creates: /usr/local/bin/pip3
    - name: Docker ppa key
      apt_key: 
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
    - name: Docker ppa
      apt_repository: 
        repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable'
    - name: NodeJS ppa key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
    - name: NodeJS ppa
      apt_repository:
        repo: 'deb https://deb.nodesource.com/node_8.x xenial main'
    - name: Certbot ppa
      apt_repository:
        repo: ppa:certbot/certbot
    - name: Update apt cache
      apt: update_cache=yes
    - name: Docker
      apt:
        name: docker-ce
    - name: Docker root on extra disk
      file:
        path: /mnt/docker
        state: directory
    - name: Docker re root
      lineinfile:
        path: /lib/systemd/system/docker.service
        regexp: '^ExecStart'
        line: ExecStart=/usr/bin/dockerd -H fd:// --data-root /mnt/docker
        insertafter: '[Service]'
      notify:
        - restart docker
- hosts: notebookserver
  vars_files:
    - vars.yml
  handlers:
    - name: restart docker
      systemd:
        daemon_reload: yes
        name: docker
        state: restarted
    - name: restart jupyterhub
      systemd:
        name: jupyterhub
        state: restarted
        daemon_reload: yes
  tasks:
    - pip:
        executable: pip3
        name: "{{ item }}"
      loop:
        - setuptools==40.2.0
        - jupyterhub==0.9.3
      notify:
        - restart jupyterhub
    - user:
        name: "{{ item.name }}"
        password: "{{ item.password }}"
        groups: docker
        home: /mnt/home/{{ item.name }}
      loop: "{{ posix_users }}"
    - name: NodeJS
      apt:
        name: nodejs
    - name:  Certbot
      apt:
        name: certbot
    - npm:
        global: yes
        name: configurable-http-proxy
    - file:
        path: /etc/jupyterhub
        state: directory
    - name: jupyterhub_config
      template:
        src: jupyterhub_config.py.j2
        dest: /etc/jupyterhub/jupyterhub_config.py
      notify:
        - restart jupyterhub
    - name: Allow ssh from anywhere
      ufw:
        rule: limit
        name: OpenSSH
    - name:  Allow http(s) traffic
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 80
        - 443
        - 8888
        - 8080
        - 3001
    - name: Allow Jupyter server internal traffic
      ufw:
        rule: allow
        port: 8081
        proto: tcp
        from_ip: 172.17.0.0/12
    - name: Enable firewall
      ufw:
        state: enabled
        policy: deny
    - name: Check letsencrypt
      stat:
        path: /etc/letsencrypt/live/{{ hub_domain }}/privkey.pem
      register: privcert
    - name: Check local letsencrypt cache
      local_action:
        module: stat
        path: "{{ hub_domain }}/letsencrypt/live/{{ hub_domain }}/privkey.pem"
      register: localprivcert
    - name: CertBot from cache
      synchronize:
        src: "{{ hub_domain }}/letsencrypt/"
        dest: /etc/letsencrypt/
        recursive: yes
      when: privcert.stat.exists == False and localprivcert.stat.exists and not selfsigned
    - name: CertBot
      command: certbot certonly --standalone --preferred-challenges http --non-interactive -d {{ hub_domain }} --agree-tos --email {{ certbot_email }}
      args:
        creates: /etc/letsencrypt/live/{{ hub_domain }}/privkey.pem
      when: privcert.stat.exists == False and localprivcert.stat.exists == False and not selfsigned
      notify:
        - restart jupyterhub
    - name: Self signed cert
      command: openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/letsencrypt/live/{{ hub_domain }}/privkey.pem -out /etc/letsencrypt/live/{{ hub_domain }}/fullchain.pem -subj "/C=NL/ST=Noord Holland/L=Amsterdam/O=Netherlands eScience Center/CN=eWatercycle"
      args:
        creates: /etc/letsencrypt/live/{{ hub_domain }}/privkey.pem
      when: privcert.stat.exists == False and selfsigned and localprivcert.stat.exists == False
      notify:
        - restart jupyterhub
    - name: CertBot build cache
      block:
      - name: Create backup folder
        local_action: 
          module: file
          path: "{{ hub_domain }}"
          state: directory
      - name: Synchronize letsencrypt folder
        synchronize:
          src: /etc/letsencrypt/
          dest: "{{ hub_domain }}/letsencrypt/"
          recursive: yes
          mode: pull
      when: localprivcert.stat.exists == False and not selfsigned
    - name: JupyterHub systemd file
      copy:
        src: jupyterhub.systemd
        dest: /etc/systemd/system/jupyterhub.service
    - name: Jupyterlab
      include_role:
        name: jupyterlab
    - name: grpc4bmi
      pip:
        executable: pip3
        name: git+https://github.com/eWaterCycle/grpc4bmi.git@6b24079b16b0fc0abde8035d20cafab8a7deb9b2#egg=grpc4bmi
    - name: parametersetdb
      pip:
        executable: pip3
        name: git+https://github.com/eWaterCycle/parametersetdb.git@8a8fe1a703efdbdf1b70d1c626810b36f707b50f
    - name: subversion
      apt:
        name: subversion
    - name: grpc4bmi Docker images
      docker_image:
        name: '{{ item }}'
      with_items:
        - ewatercycle/walrus-grpc4bmi
        - ewatercycle/pcrg-grpc4bmi
        - ewatercycle/wflow-grpc4bmi
    - name: Sample notebooks
      git:
        repo: https://github.com/eWaterCycle/notebooks.git
        version: '0.1.0'
        dest: /mnt/home/{{item.name}}/sample-notebooks
      loop: "{{ posix_users }}"
    - name: Chown sample notebooks
      file:
        path: /mnt/home/{{item.name}}/sample-notebooks
        group: "{{ item.name }}"
        owner: "{{ item.name }}"
        recurse: yes
        state: directory
      loop: "{{ posix_users }}"
    - name: amuse-framework - git
      git:
        repo: https://github.com/eWaterCycle/amuse-framework.git
        dest: /mnt/apps/amuse-framework
        version: c7abbed916a2f42fd18da2a5176ebfb6d124aec2
        depth: 1
        force: yes
    - name: amuse-framework - apt deps
      apt:
        update_cache: yes
        name: "{{ item }}"
      loop:
        - build-essential
        - curl
        - g++
        - gfortran
        - gettext
        - zlib1g-dev
        - libopenmpi-dev
        - openmpi-bin
        - libfftw3-3
        - libfftw3-dev
        - libmpfr4
        - libmpfr-dev
        - libhdf5-serial-dev
        - libgsl-dev
    - name: amuse-framework - Python deps
      pip:
        executable: pip3
        name: "{{ item }}"
      loop:
        - mpi4py==3.0.0
        - docutils==0.14
        - nose==1.3.7
        - h5py==2.8.0
    - name: amuse-framework - configure
      shell: PYTHON=/usr/bin/python3 ./configure
      args:
        chdir: /mnt/apps/amuse-framework
    - name: amuse-framework - install
      make: 
        target: install
        chdir: /mnt/apps/amuse-framework
    - name: hymuse - repo
      git:
        repo: https://github.com/eWaterCycle/HyMUSE.git
        dest: /mnt/apps/HyMUSE
        version: 4b8104d1aa1ca744e36198d22a5386ab20e48fad
        depth: 1
        force: yes
    - name: hymuse - build
      shell: DOWNLOAD_CODES=1 /usr/bin/python3 setup.py build
      args:
        chdir: /mnt/apps/HyMUSE
    - name: hymuse - install
      command: /usr/bin/python3 setup.py install
      args:
        chdir: /mnt/apps/HyMUSE
    - name: OneClient
      include_role:
        name: oneclient