---
- hosts: notebookserver
  vars_files:
    - vars.yml
  tasks:
    - apt:
        update_cache: yes
        name: "{{ item }}"
      loop:
        - git
        - gcc
        - g++
        - make
        - ntp
        - apt-transport-https
        - python3-setuptools
    # Extra disk (ceph)
    - name: Mount dir for ceph
      file:
        path: /data
        state: directory
    - name: create a xfs filesystem on /dev/vdc
      filesystem:
        fstype: xfs
        dev: /dev/vdc
    - name: Mount /dev/vdc as /data
      mount:
        fstype: xfs
        state: mounted
        path: /data
        src: /dev/vdc
    # Extra disk (volatile)
    - name: Mount dir for /mnt
      file:
        path: /mnt
        state: directory
    - name: Create a xfs filesystem on /dev/vdb
      filesystem:
        fstype: xfs
        dev: /dev/vdb
    - name: Mount /dev/vdb as /mnt
      mount:
        fstype: xfs
        state: mounted
        path: /mnt
        src: /dev/vdb
    - name: Home root
      file:
        path: /mnt/home
        state: directory
    - name: Apps root
      file:
        path: /mnt/apps
        state: directory
    - get_url:
        url: https://bootstrap.pypa.io/get-pip.py
        dest: /opt/get-pip.py
    - command: python3 /opt/get-pip.py
      args:
        creates: /usr/local/bin/pip3
    - name: NodeJS ppa key
      apt_key:
        url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
        state: present
    - name: NodeJS ppa
      apt_repository:
        repo: 'deb https://deb.nodesource.com/node_8.x xenial main'
    - name: Docker
      include_role:
        name: docker
      vars:
        - docker_root: "/mnt/docker"
- hosts: notebookserver
  vars_files:
    - vars.yml
  handlers:
    - name: restart jupyterhub
      systemd:
        name: jupyterhub
        state: restarted
        daemon_reload: yes
  tasks:
    - pip:
        executable: pip3
        name: "{{ item }}"
      loop:
        - setuptools==40.2.0
        - jupyterhub==0.9.3
      notify:
        - restart jupyterhub
    - user:
        name: "{{ item.name }}"
        password: "{{ item.password }}"
        groups: docker
        home: /mnt/home/{{ item.name }}
      loop: "{{ posix_users }}"
    - name: NodeJS
      apt:
        name: nodejs
    - npm:
        global: yes
        name: configurable-http-proxy
    - file:
        path: /etc/jupyterhub
        state: directory
    - name: jupyterhub_config
      template:
        src: jupyterhub_config.py.j2
        dest: /etc/jupyterhub/jupyterhub_config.py
      notify:
        - restart jupyterhub
    - name: Allow ssh from anywhere
      ufw:
        rule: limit
        name: OpenSSH
    - name:  Allow http(s) traffic
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 80
        - 443
        - 8888
        - 8080
        - 3001
    - name: Allow Jupyter server internal traffic
      ufw:
        rule: allow
        port: 8081
        proto: tcp
        from_ip: 172.17.0.0/12
    - name: Enable firewall
      ufw:
        state: enabled
        policy: deny
    - name: JupyterHub systemd file
      copy:
        src: jupyterhub.systemd
        dest: /etc/systemd/system/jupyterhub.service
    - name: Jupyterlab
      include_role:
        name: jupyterlab
    - name: grpc4bmi
      pip:
        executable: pip3
        name: git+https://github.com/eWaterCycle/grpc4bmi.git@6b24079b16b0fc0abde8035d20cafab8a7deb9b2#egg=grpc4bmi
    - name: parametersetdb
      pip:
        executable: pip3
        name: git+https://github.com/eWaterCycle/parametersetdb.git@8a8fe1a703efdbdf1b70d1c626810b36f707b50f
    - name: subversion
      apt:
        name: subversion
    - name: grpc4bmi Docker images
      docker_image:
        name: '{{ item }}'
      with_items:
        - ewatercycle/walrus-grpc4bmi
        - ewatercycle/pcrg-grpc4bmi
        - ewatercycle/wflow-grpc4bmi
    - name: Sample notebooks
      git:
        repo: https://github.com/eWaterCycle/notebooks.git
        version: '0.1.0'
        dest: /mnt/home/{{item.name}}/sample-notebooks
      loop: "{{ posix_users }}"
    - name: Chown sample notebooks
      file:
        path: /mnt/home/{{item.name}}/sample-notebooks
        group: "{{ item.name }}"
        owner: "{{ item.name }}"
        recurse: yes
        state: directory
      loop: "{{ posix_users }}"
    - name: Letsencrypt
      include_role:
        name: letsencrypt
    - name: OneClient
      include_role:
        name: oneclient